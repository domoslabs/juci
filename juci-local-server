#!/usr/bin/nodejs

var express = require('express');
var app = express();
var JSON = require("JSON"); 
var fs = require("fs"); 
var request = require("request"); 
var http = require("http"); 
var bodyParser = require('body-parser')
var config = { port: 3000, ubus_uri: "http://192.168.1.1/ubus" };

//check if file exists and is a file
if (fs.existsSync("juci-local-server.config")){
	try { 
		config = JSON.parse(fs.readFileSync("juci-local-server.config"));
	} catch(e){
	
	}
}

for(var i = 0; i < process.argv.length; i++){
	switch(process.argv[i]){
		case "--host": config.ubus_uri = "http://"+process.argv[++i]+"/ubus"; break; 
		case "--port": config.port = parseInt(process.argv[++i]); break; 
		case "--ubus": config.ubus_uri = process.argv[++i]; break; 
	}; 
} 

if(!config.ubus_uri || !config.port){
	console.log("juci-local-server: ");
	console.log("	--host <host>"); 
	console.log("		specify host to connect to"); 
	console.log("	--port <port>"); 
	console.log("		specify port to use for local server"); 
	console.log("	--ubus <ubus url>"); 
	console.log("		specify ubus url directly (https://192.168.1.1/ubus)"); 
	process.exit(); 
}

app.use( bodyParser.json() );       // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
  extended: true
})); 

app.use(express.static(__dirname + '/bin/www'));

var rpc_calls = {
	"local.features": function(params, next){
		next({"list": ["rpcforward"]}); 
	}, 
	"local.set_rpc_host": function(params, next){
		if(params.rpc_host) {
			config.ubus_uri = "http://"+params.rpc_host+"/ubus"; 
			console.log("Server: will forward all requests to "+config.ubus_uri); 
		}
		next({}); 
	}, 
}; 

var spawn = require('child_process').spawn;

spawn('make', ["debug", "DEFAULT_THEME=y"], { customFds: [0,1,2] })
.on("exit", function(code){
	console.log("Recompiled gui, code: "+code); 
}); 


var server = app.listen(config.port, function () {
	var host = server.address().address;
	var port = server.address().port;

	for(var i = 0; i < process.argv.length; i++){
		switch(process.argv[i]){
			case "-p": {
				var paths = process.argv[++i].split(";"); 
				paths.map(function(k){
					var url, path; 
					if(k.indexOf(":") >= 0){
						var parts = k.split(":"); 
						path = parts[1]; 
						url = parts[0]; 
					} else {
						url = k.split("/").pop(); 
						path = k; 
					}
					console.log("Adding extra plugin search path: "+path+" at "+url); 
					app.use(url, express.static(path + '/'));
				}); 
			} break; 
		}
	}
	console.log('Local server listening on http://%s:%s', host, port);
});

