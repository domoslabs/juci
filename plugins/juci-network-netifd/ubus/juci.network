#!/bin/sh

. /usr/share/libubox/jshn.sh

case "$1" in
	list)
		echo '{ "has_link" : {"interface":"str"}, "ifup" : {"interface":"str"}, "arp" : {}, "ipv4routes" : {}, "ipv6routes" : {}, "ipv6neigh" : {}, "load" : {}, "nameservers" : {}, "nat_table" : {}, "protocols" : {}, "services" : {}, "online" : {} }'
	;;
	call)
		case "$2" in
			has_link)
				local input interface ifstatus up device present ret uplink_device
				read input;
				json_load "$input"
				json_get_var interface interface
				if [ "$interface" == "" ]; then
					json_init
					json_add_string "error" "invalid parameters"
					json_dump
					exit
				fi
				ifstatus=$(ifstatus "$interface")
				json_load "$ifstatus"
				json_get_var up up
				if [ $up -eq 1 ]; then
					json_init
					json_add_boolean "has_link" 1
					json_dump
					exit
				elif [ $up -eq 0 ]; then
					json_get_var device device
					case "$device" in
						br-*)
							ret=$(ubus call router.port status "{\"port\":\"$device\"}")
							json_load "$ret"
							json_get_var uplink_device uplink_device
							json_init
							if [ $uplink_device != "" ]; then
								json_add_boolean "has_link" 1
							else
								json_add_boolean "has_link" 0
							fi
							json_dump
						;;
						*)
							devstatus=$(devstatus "$device")
							json_load "$devstatus"
							json_get_var present present
							json_init
							json_add_boolean "has_link" $present
							json_dump
						;;
					esac
				else
					json_init
					json_add_string "error" "invalid parameters"
					json_dump
				fi
			;;
			ifup)
				local input interface
				read input;
				json_load "$input"
				json_get_var interface interface
				ifup $interface
				json_init
				json_dump
			;;
			online)
				json_load "$(cat /tmp/internet_connection_status 2>/dev/null)"
				json_dump
			;;
			arp)
				ubus call router.net arp
			;;
			nat_table)
				ubus call router.net ip_conntrack
			;;
			ipv4routes)
				ubus call router.net ipv4_routes
			;;
			ipv6routes)
				ubus call router.net ipv6_routes
			;;
			ipv6neigh)
				ubus call router.net ipv6_neigh
			;;
			load)
				json_init 
				json_add_int "active_connections" $(cat /proc/sys/net/netfilter/nf_conntrack_count)
				json_add_int "max_connections" $(cat /proc/sys/net/netfilter/nf_conntrack_max)
				json_dump
			;;
			nameservers)
				json_init 
				json_add_array "nameservers"; 
				for ns in `awk '/nameserver/{print $2}' /var/resolv.conf.auto`; do
					json_add_string "" $ns; 
				done
				json_close_array
				json_dump
			;;
			protocols)
				json_init
				json_add_array "protocols"
				for p in $(grep -roh 'proto_\(.*\)_init' /lib/netifd/proto/ | sed -e 's|proto_\(.*\)_init|\1|g'); do
					json_add_string "" $p
				done
				json_dump
			;;
			services)
				local netstatlist=/tmp/netstatlist
				netstat -plan | grep -w LISTEN | tr -d '*' > $netstatlist
				json_init
				json_add_array "list"
				while read -r line
				do
					json_add_object ""
					json_add_string proto "$(echo $line | awk '{print$1}')"
					lip="$(echo $line | awk '{print$4}')"
					lport="$(echo $line | awk '{print$4}' | awk -F':' '{print$NF}')"
					lip=${lip%:$lport}
					json_add_string listen_ip $lip
					json_add_string listen_port $lport
					json_add_string state "$(echo $line | awk '{print$6}')"
					json_add_string pid "$(echo $line | awk '{print$7}' | cut -d'/' -f1)"
					json_add_string name "$(echo $line | awk '{print$7}' | cut -d'/' -f2)"
					json_select ..
				done < $netstatlist
				rm -f $netstatlist
				json_dump
			;;
		esac
	;;
esac
